generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usuarios {
  id                 Int           @id @default(autoincrement())
  nome               String        @db.VarChar(255)
  ativo              Int           @default(1)
  id_senha           Int
  email              String        @unique @db.VarChar(255)
  telefone           String        @db.VarChar(255)
  data_nasc          DateTime      @db.Date
  cpf                String        @db.VarChar(255)
  senha              String        @db.VarChar(255)
  data_criado        DateTime?     @default(now()) @db.DateTime(0)
  data_atualizado    DateTime?     @default(now()) @db.DateTime(0)
  bairro             String        @db.VarChar(255)
  cep                String?       @db.VarChar(255)
  complemento        String?       @db.VarChar(255)
  numero             String        @db.VarChar(255)
  rua                String        @db.VarChar(255)
  cidade             String        @db.VarChar(255)
  estado             String        @db.VarChar(255)
  codigo_verificacao String        @db.VarChar(255)
  verificado         Int           @default(0)
  anuncios           anuncios[]
  comentarios        comentarios[]
}

model anuncios {
  id              Int           @id @default(autoincrement())
  id_usuario      Int
  titulo          String        @db.VarChar(255)
  descricao       String        @db.VarChar(5000)
  ativo           Int           @default(1)
  data_criado     DateTime      @default(now()) @db.DateTime(0)
  data_atualizado DateTime?     @default(now()) @db.DateTime(0)
  id_tipo_anuncio Int
  bairro          String?       @db.VarChar(255)
  cep             String?       @db.VarChar(255)
  complemento     String?       @db.VarChar(255)
  numero          String?       @db.VarChar(255)
  rua             String?       @db.VarChar(255)
  cidade          String?       @db.VarChar(255)
  estado          String?       @db.VarChar(255)
  tipo_anuncios   tipo_anuncios @relation(fields: [id_tipo_anuncio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "anuncios_ibfk_2")
  usuarios        usuarios      @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "anuncios_ibfk_1")
  comentarios     comentarios[]
  imagens         imagens[]
  valores         valores[]

  @@index([id_usuario], map: "anuncios_ibfk_1")
  @@index([id_tipo_anuncio], map: "anuncios_ibfk_2")
}

model valores {
  id          Int       @id @default(autoincrement())
  valor       Int
  ativo       Int       @default(1)
  id_anuncio  Int
  data_criado DateTime? @default(now()) @db.DateTime(0)
  anuncios    anuncios  @relation(fields: [id_anuncio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "valores_ibfk_1")

  @@index([id_anuncio], map: "valores_ibfk_1")
}

model tipo_anuncios {
  id          Int        @id @default(autoincrement())
  nome        String
  ativo       Int        @default(1)
  data_criado DateTime?  @default(now()) @db.DateTime(0)
  anuncios    anuncios[]
}

model imagens {
  id          Int       @id @default(autoincrement())
  id_anuncio  Int
  principal   Int
  nome        String
  ativo       Int       @default(1)
  data_criado DateTime? @default(now()) @db.DateTime(0)
  caminho     String
  anuncios    anuncios  @relation(fields: [id_anuncio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "imagens_ibfk_1")

  @@index([id_anuncio], map: "imagens_ibfk_1")
}

model comentarios {
  id          Int      @id @default(autoincrement())
  id_anuncio  Int
  id_usuario  Int
  comentario  String   @db.VarChar(5000)
  data_criado DateTime @default(now()) @db.DateTime(0)
  anuncios    anuncios @relation(fields: [id_anuncio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comentarios_ibfk_1")
  usuarios    usuarios @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comentarios_ibfk_2")

  @@index([id_anuncio], map: "comentarios_ibfk_1")
  @@index([id_usuario], map: "comentarios_ibfk_2")
}

model estados {
  id      Int       @id @default(autoincrement())
  nome    String    @db.VarChar(100)
  uf      String    @db.VarChar(100)
  cidades cidades[]
}

model cidades {
  id        Int     @id @default(autoincrement())
  nome      String  @db.VarChar(100)
  id_estado Int
  estados   estados @relation(fields: [id_estado], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cidades_ibfk_1")

  @@index([id_estado], map: "cidades_ibfk_1")
}
